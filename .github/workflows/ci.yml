name: Scan for data quality

on: 
  pull_request:

    branches: [ main ]

  

jobs:
  soda_scan:
    runs-on: ubuntu-latest
    name: Run Soda Scan
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python 3.9
        uses: actions/setup-python@v1
        with:
          python-version: 3.9

     # - name: Install dependencies
     #   run: |
     #     python -m pip install --upgrade pip
     #     pip install soda-core soda-scientific soda-core-postgres # Adaptez le driver à votre base de données      
#### si ça marche sur ce scan simple je veux refaire ça avec dbt
          

      - name: Perform Soda Scan
        uses: sodadata/soda-github-action@main
        env:
          SODA_CLOUD_API_KEY: ${{ secrets.SODA_CLOUD_API_KEY }}
          SODA_CLOUD_API_SECRET: ${{ secrets.SODA_CLOUD_API_SECRET }}
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        with:
          soda_library_version: v1.0.4
          data_source: my_datasource
          configuration: ./configuration.yml
          checks: ./checks.yml
          templates: ./template.yml
        continue-on-error: true  # Permet de ne pas casser le build en cas d'échec

      - name: Comment PR results
        if: always()  # S'exécute même en cas d'échec
        uses: thollander/actions-comment-pull-request@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          message: |
            Résultats du scan Soda: ${{ steps.soda_scan.outcome }}
            Détails: ${{ env.SCAN_CLOUD_LINK }}

         

# Test Soda workflow"//
# v2 vers main
